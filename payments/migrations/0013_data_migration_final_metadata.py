# Generated by Django 4.1.1 on 2022-10-23 08:55
from decimal import Decimal
from django.db import migrations, models


def metadata_from_items(invoice):
    def _block_cost_str(block):
        if not block.voucher:
            return f"£{block.block_config.cost}"
        block_cost = Decimal(float(block.block_config.cost))
        if block.voucher.discount_amount:
            if block.voucher.discount_amount > block_cost:
                block_cost = 0
            else:
                block_cost -= Decimal(block.voucher.discount_amount)
        else:
            percentage_to_pay = Decimal((100 - block.voucher.discount) / 100)
            block_cost = (block_cost * percentage_to_pay).quantize(Decimal('.01'))
        return f"£{block_cost} (voucher applied: {block.voucher.code})"

    def _product_purchase_name_str(pp):
        if pp.size:
            return f"{pp.product} - {pp.size}"
        return str(pp.product)

    blocks = {
        f"block-{item.id}": {
            "name": f"Credit block: {item.block_config.name}", "cost": _block_cost_str(item)
        } for item in invoice.blocks.annotate(count=models.Count("bookings__id")).order_by("-count")
    }
    subscriptions = {
        f"subscription-{item.id}": {
            "name": item.config.name, "cost": f"£{item.cost_as_of_today()}"
        } for item in invoice.subscriptions.all()
    }
    gift_vouchers = {
        f"gift_voucher-{gift_voucher.id}": {
            "name": gift_voucher.name, "cost": f"£{gift_voucher.gift_voucher_config.cost}"
        } for gift_voucher in invoice.gift_vouchers.all()
    }

    merchandise = {
        f"product_purchase-{product_purchase.id}": {
            "name": _product_purchase_name_str(product_purchase),
            "cost": f"£{product_purchase.cost}"
        } for product_purchase in invoice.product_purchases.all()
    }
    return {**blocks, **subscriptions, **gift_vouchers, **merchandise}


def add_final_metadata_from_payment_intent(apps, schema_editor):
    StripePaymentIntent = apps.get_model('payments', 'StripePaymentIntent')
    Invoice = apps.get_model('payments', 'Invoice')

    for invoice in Invoice.objects.filter(paid=True):
        metadata = {}
        if invoice.stripe_payment_intent_id:
            try:
                payment_intent = StripePaymentIntent.objects.get(payment_intent_id=invoice.stripe_payment_intent_id)
                metadata = payment_intent.metadata.copy()
                del metadata["invoice_id"]
                del metadata["invoice_signature"]
            except StripePaymentIntent.DoesNotExist:
                ...
        if not metadata:
            metadata = metadata_from_items(invoice)
        invoice.final_metadata = metadata
        invoice.save()


class Migration(migrations.Migration):

    dependencies = [
        ("payments", "0012_invoice_final_metadata"),
    ]

    operations = [
        migrations.RunPython(add_final_metadata_from_payment_intent, migrations.RunPython.noop)
    ]
