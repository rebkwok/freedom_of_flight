# Generated by Django 3.0.7 on 2020-06-29 11:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseVoucher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount', models.PositiveIntegerField(help_text='Enter a number between 1 and 100')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('max_vouchers', models.PositiveIntegerField(blank=True, help_text='Maximum uses across all users', null=True, verbose_name='Maximum available vouchers')),
                ('max_per_user', models.PositiveIntegerField(blank=True, default=1, help_text='Maximum times this voucher can be used by a single user', null=True, verbose_name='Maximum uses per user')),
                ('is_gift_voucher', models.BooleanField(default=False)),
                ('activated', models.BooleanField(default=True)),
                ('name', models.CharField(blank=True, help_text='Name of recipient', max_length=255, null=True)),
                ('message', models.TextField(blank=True, help_text='Message (max 500 characters)', max_length=500, null=True)),
                ('purchaser_email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('paid', models.BooleanField(default=False, help_text='Payment has been made by user')),
                ('manual_expiry_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['user__username'],
            },
        ),
        migrations.CreateModel(
            name='BlockType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255)),
                ('size', models.PositiveIntegerField(help_text='Number of events in block')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8)),
                ('duration', models.PositiveIntegerField(help_text='Number of weeks until block expires (from first use)')),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('start', models.DateTimeField(help_text='Start date and time')),
                ('duration', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('max_participants', models.PositiveIntegerField()),
                ('contact_email', models.EmailField(default='freedomofflightaerial@gmail.com', max_length=254)),
                ('cancellation_period', models.PositiveIntegerField(default=24)),
                ('email_studio_when_booked', models.BooleanField(default=False)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=40, populate_from=['name', 'date'], unique=True)),
                ('cancelled', models.BooleanField(default=False)),
                ('allow_booking_cancellation', models.BooleanField(default=True)),
                ('is_online', models.BooleanField(default=False)),
                ('video_link', models.URLField(blank=True, help_text='Zoom/Video URL (for online classes only)', null=True)),
                ('show_on_site', models.BooleanField(default=False)),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='booking.Course')),
            ],
            options={
                'ordering': ['-start'],
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=40, populate_from=['name'], unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BlockVoucher',
            fields=[
                ('basevoucher_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='booking.BaseVoucher')),
                ('code', models.CharField(max_length=255, unique=True)),
            ],
            bases=('booking.basevoucher',),
        ),
        migrations.CreateModel(
            name='WaitingListUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitinglistusers', to='booking.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waitinglists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UsedBlockVoucher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_id', models.CharField(blank=True, max_length=20, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GiftVoucherType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, help_text='Display on site; set to False instead of deleting unused voucher types')),
                ('block_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gift_vouchers', to='booking.BlockType')),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(help_text='Description')),
                ('track', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='booking.Track')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='event_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.EventType'),
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_events', models.PositiveIntegerField(default=4)),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.EventType')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='course_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.CourseType'),
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_booked', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_rebooked', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('CANCELLED', 'Cancelled')], default='OPEN', max_length=255)),
                ('attended', models.BooleanField(default=False, help_text='Student has attended this event')),
                ('no_show', models.BooleanField(default=False, help_text='Student paid but did not attend')),
                ('block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='booking.Block')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='booking.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('can_view_registers', 'Can view registers'),),
            },
        ),
        migrations.AddField(
            model_name='blocktype',
            name='course_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='booking.CourseType'),
        ),
        migrations.AddField(
            model_name='blocktype',
            name='event_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='booking.EventType'),
        ),
        migrations.AddField(
            model_name='block',
            name='block_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.BlockType'),
        ),
        migrations.AddField(
            model_name='block',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='waitinglistuser',
            index=models.Index(fields=['user', 'event'], name='booking_wai_user_id_b026f7_idx'),
        ),
        migrations.AddField(
            model_name='usedblockvoucher',
            name='voucher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='booking.BlockVoucher'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type', 'start', 'cancelled'], name='booking_eve_event_t_b17789_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type', 'name', 'start', 'cancelled'], name='booking_eve_event_t_270557_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['event', 'user', 'status'], name='booking_boo_event_i_15add5_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['block'], name='booking_boo_block_i_e787ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='booking',
            unique_together={('user', 'event')},
        ),
        migrations.AddField(
            model_name='blockvoucher',
            name='block_types',
            field=models.ManyToManyField(to='booking.BlockType'),
        ),
        migrations.AddIndex(
            model_name='block',
            index=models.Index(fields=['user', 'paid'], name='booking_blo_user_id_c5ac39_idx'),
        ),
        migrations.AddIndex(
            model_name='block',
            index=models.Index(fields=['user', 'expiry_date'], name='booking_blo_user_id_298431_idx'),
        ),
        migrations.AddIndex(
            model_name='block',
            index=models.Index(fields=['user', '-start_date'], name='booking_blo_user_id_7ff31b_idx'),
        ),
    ]
